# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-06-21 19:35
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re


def make_populate_score_history_forward(model_name, score_field_name,
                                        score_history_field_name):
    def populate_score_history_forward(apps, schema_editor):
        model = apps.get_model('pcari', model_name)
        db_alias = schema_editor.connection.alias

        for instance in model.objects.using(db_alias).all():
            score_history = str(getattr(instance, score_field_name))
            setattr(instance, score_history_field_name, score_history)
            instance.save()
    return populate_score_history_forward


class Migration(migrations.Migration):

    dependencies = [
        ('pcari', '0055_empty_strings_to_null'),
    ]

    operations = [
        migrations.AddField(
            model_name='comment',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='comment',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcari.Comment'),
        ),
        migrations.AddField(
            model_name='commentrating',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='commentrating',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcari.CommentRating'),
        ),
        migrations.AddField(
            model_name='commentrating',
            name='score_history_text',
            field=models.CharField(default='-2', max_length=256, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')]),
        ),
        migrations.AddField(
            model_name='qualitativequestion',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='qualitativequestion',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcari.QualitativeQuestion'),
        ),
        migrations.AddField(
            model_name='quantitativequestion',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='quantitativequestion',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcari.QuantitativeQuestion'),
        ),
        migrations.AddField(
            model_name='quantitativequestionrating',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='quantitativequestionrating',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AddField(
            model_name='quantitativequestionrating',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcari.QuantitativeQuestionRating'),
        ),
        migrations.AddField(
            model_name='quantitativequestionrating',
            name='score_history_text',
            field=models.CharField(default='-2', max_length=256, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\,\\d+)*\\Z'), code='invalid', message='Enter only digits separated by commas.')]),
        ),
        migrations.AddField(
            model_name='respondent',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='respondent',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pcari.Respondent'),
        ),
        migrations.AlterField(
            model_name='qualitativequestion',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='qualitativequestion',
            name='tag',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.AlterField(
            model_name='quantitativequestion',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='quantitativequestion',
            name='tag',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.AlterField(
            model_name='respondent',
            name='language',
            field=models.CharField(choices=[(b'en', 'English'), (b'tl', 'Filipino')], max_length=2),
        ),
        migrations.AlterField(
            model_name='respondent',
            name='location',
            field=models.CharField(blank=True, default='', max_length=512, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='quantitativequestionrating',
            unique_together=set([('respondent', 'question')]),
        ),
        migrations.RunPython(make_populate_score_history_forward('QuantitativeQuestionRating', 'score', 'score_history_text')),
        migrations.RunPython(make_populate_score_history_forward('CommentRating', 'score', 'score_history_text')),
        migrations.RemoveField(
            model_name='commentrating',
            name='score',
        ),
        migrations.RemoveField(
            model_name='quantitativequestionrating',
            name='score',
        ),
    ]
