# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-07-01 18:20
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


def populate_respondents_forward(apps, schema_editor):
    Respondent = apps.get_model('pcari', 'Respondent')
    UserData = apps.get_model('pcari', 'UserData')
    db_alias = schema_editor.connection.alias

    for user_data in UserData.objects.using(db_alias).all():
        Respondent.objects.using(db_alias).create(
            id=user_data.user_id,
            age=(None if user_data.age <= 0 else user_data.age),
            location=('' if user_data.barangay is None else user_data.barangay),
            gender=('' if user_data.gender is None else user_data.gender),
            language=('tl' if user_data.language == 'Filipino' else 'en'),
            submitted_personal_data=True,
            completed_survey=True,
        )


def populate_quantitative_question_ratings_forward(apps, schema_editor):
    QuantitativeQuestionRating = apps.get_model('pcari', 'QuantitativeQuestionRating')
    QuantitativeQuestion = apps.get_model('pcari', 'QuantitativeQuestion')
    Rating = apps.get_model('pcari', 'Rating')
    db_alias = schema_editor.connection.alias

    for rating in Rating.objects.using(db_alias).all():
        question = QuantitativeQuestion.objects.get(id=rating.qid)
        QuantitativeQuestionRating.objects.using(db_alias).create(
            respondent_id=rating.user_id,
            question_id=question.id,
            timestamp=rating.date,
            score=rating.score,
        )


def add_qualitative_question_forward(apps, schema_editor):
    QualitativeQuestion = apps.get_model('pcari', 'QualitativeQuestion')
    db_alias = schema_editor.connection.alias
    QualitativeQuestion.objects.using(db_alias).get_or_create(
        prompt='How could your Barangay help you better prepare for a disaster?',
        tag='Preparedness Suggestion',
    )


def populate_comments_forward(apps, schema_editor):
    Comment = apps.get_model('pcari', 'Comment')
    QualitativeQuestion = apps.get_model('pcari', 'QualitativeQuestion')
    db_alias = schema_editor.connection.alias

    for comment in Comment.objects.using(db_alias).all():
        comment.respondent_id = comment.user_id
        comment.language = 'en' if comment.original_language == 'English' else 'tl'
        comment.message = comment.comment if comment.language == 'en' else comment.filipino_comment
        comment.question = QualitativeQuestion.objects.first()
        comment.save()

        if comment.comment.strip() and comment.filipino_comment.strip():
            other_language = 'tl' if comment.language == 'en' else 'en'
            other_message = comment.filipino_comment if other_language == 'tl' else comment.comment
            Comment.objects.using(db_alias).create(
                respondent_id=comment.respondent_id,
                language=other_language,
                message=other_message.strip(),
                predecessor=comment,
                tag=comment.tag,
                timestamp=comment.timestamp,
                question=comment.question,
                user_id=comment.user_id,  # Will be deleted
            )


def populate_comment_ratings_forward(apps, schema_editor):
    CommentRating = apps.get_model('pcari', 'CommentRating')
    Comment = apps.get_model('pcari', 'Comment')
    Respondent = apps.get_model('pcari', 'Respondent')
    db_alias = schema_editor.connection.alias

    for rating in CommentRating.objects.using(db_alias).all():
        if rating.cid == -1:
            rating.delete()
        else:
            try:
                rating.comment = Comment.objects.using(db_alias).get(id=rating.cid)
                rating.respondent = Respondent.objects.using(db_alias).get(id=rating.user_id)
                rating.save()
            except Comment.DoesNotExist:
                print('=> Deleting comment rating (no comment)')
                rating.delete()
            except Respondent.DoesNotExist:
                print('=> Deleting comment rating (no respondent)')
                rating.delete()


def delete_duplicate_comment_ratings_forward(apps, schema_editor):
    CommentRating = apps.get_model('pcari', 'CommentRating')
    db_alias = schema_editor.connection.alias

    id_pairs = list(CommentRating.objects.using(db_alias).values_list('respondent_id', 'comment_id'))
    duplicate_id_pairs = [id_pair for id_pair in id_pairs if id_pairs.count(id_pair) > 1]

    for respondent_id, comment_id in set(duplicate_id_pairs):
        query = CommentRating.objects.using(db_alias)
        query = query.filter(respondent_id=respondent_id, comment_id=comment_id)
        assert query.count() > 1

        rating_to_keep = query.first()
        for rating in query.exclude(id=rating_to_keep.id).all():
            print('=> Deleting duplicate comment rating')
            rating.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('pcari', '0048_auto_20170407_1732'),
    ]

    operations = [
        migrations.CreateModel(
            name='OptionQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('prompt', models.TextField(blank=True, default='')),
                ('tag', models.CharField(blank=True, default='', max_length=256)),
                ('_options_text', models.TextField(blank=True, default=b'[]')),
                ('input_type', models.CharField(choices=[('select', 'Select'), ('radio', 'Radio')], default='select', max_length=16)),
                ('predecessor', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successors', to='pcari.OptionQuestion')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OptionQuestionChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('option', models.TextField(blank=True)),
                ('predecessor', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successors', to='pcari.OptionQuestionChoice')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='selections', to='pcari.OptionQuestion')),
            ],
        ),
        migrations.CreateModel(
            name='QuantitativeQuestionRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('score', models.SmallIntegerField(default=-2)),
                ('predecessor', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successors', to='pcari.QuantitativeQuestionRating')),
            ],
        ),
        migrations.CreateModel(
            name='Respondent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('age', models.PositiveSmallIntegerField(default=None, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], default='', max_length=1)),
                ('location', models.CharField(blank=True, default='', max_length=512)),
                ('language', models.CharField(choices=[(b'en', 'English'), (b'tl', 'Filipino')], max_length=8)),
                ('submitted_personal_data', models.BooleanField(default=False)),
                ('completed_survey', models.BooleanField(default=False)),
                ('predecessor', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successors', to='pcari.Respondent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(populate_respondents_forward),
        migrations.RenameField(
            model_name='quantitativequestion',
            old_name='qid',
            new_name='id',
        ),
        migrations.AlterField(
            model_name='quantitativequestion',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AddField(
            model_name='quantitativequestionrating',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='pcari.QuantitativeQuestion'),
        ),
        migrations.AddField(
            model_name='quantitativequestionrating',
            name='respondent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcari.Respondent'),
        ),
        migrations.RunPython(populate_quantitative_question_ratings_forward),
        migrations.RemoveField(
            model_name='flaggedcomment',
            name='user',
        ),
        migrations.DeleteModel(
            name='GeneralSetting',
        ),
        migrations.DeleteModel(
            name='Progression',
        ),
        migrations.AlterUniqueTogether(
            name='rating',
            unique_together=set([]),
        ),
        migrations.RemoveField(
            model_name='rating',
            name='user',
        ),
        migrations.RemoveField(
            model_name='userdata',
            name='user',
        ),
        migrations.RemoveField(
            model_name='userprogression',
            name='user',
        ),
        migrations.RenameField(
            model_name='comment',
            old_name='date',
            new_name='timestamp',
        ),
        migrations.RenameField(
            model_name='commentrating',
            old_name='date',
            new_name='timestamp',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='average_score',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='number_rated',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='se',
        ),
        migrations.RemoveField(
            model_name='qualitativequestion',
            name='filipino_question',
        ),
        migrations.RemoveField(
            model_name='qualitativequestion',
            name='qid',
        ),
        migrations.AddField(
            model_name='qualitativequestion',
            name='id',
            field=models.AutoField(auto_created=True, default=None, primary_key=True, serialize=False, verbose_name='ID'),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name='qualitativequestion',
            name='question',
        ),
        migrations.AddField(
            model_name='qualitativequestion',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='qualitativequestion',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successors', to='pcari.QualitativeQuestion'),
        ),
        migrations.AddField(
            model_name='qualitativequestion',
            name='prompt',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='qualitativequestion',
            name='tag',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.RunPython(add_qualitative_question_forward),
        migrations.AddField(
            model_name='comment',
            name='language',
            field=models.CharField(choices=[(b'en', 'English'), (b'tl', 'Filipino')], default='', max_length=8),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='comment',
            name='message',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='comment',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successors', to='pcari.Comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='respondent',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='pcari.Respondent'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='comment',
            name='question',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='pcari.QualitativeQuestion'),
            preserve_default=False,
        ),
        migrations.RunPython(populate_comments_forward),
        migrations.RemoveField(
            model_name='comment',
            name='comment',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='filipino_comment',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='original_language',
        ),
        migrations.RemoveField(
            model_name='comment',
            name='user',
        ),
        migrations.RemoveField(
            model_name='quantitativequestion',
            name='average_score',
        ),
        migrations.RemoveField(
            model_name='quantitativequestion',
            name='filipino_question',
        ),
        migrations.RemoveField(
            model_name='quantitativequestion',
            name='filipino_tag',
        ),
        migrations.RemoveField(
            model_name='quantitativequestion',
            name='number_rated',
        ),
        migrations.AlterField(
            model_name='quantitativequestion',
            name='question',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.RenameField(
            model_name='quantitativequestion',
            old_name='question',
            new_name='prompt',
        ),
        migrations.AddField(
            model_name='comment',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='comment',
            name='flagged',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='commentrating',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='commentrating',
            name='comment',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='pcari.Comment'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='commentrating',
            name='respondent',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='pcari.Respondent'),
            preserve_default=False,
        ),
        migrations.RunPython(populate_comment_ratings_forward),
        migrations.RunPython(delete_duplicate_comment_ratings_forward),
        migrations.AddField(
            model_name='commentrating',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successors', to='pcari.CommentRating'),
        ),
        migrations.AddField(
            model_name='quantitativequestion',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='quantitativequestion',
            name='input_type',
            field=models.CharField(choices=[('range', 'Range'), ('number', 'Number')], default='range', max_length=16),
        ),
        migrations.AddField(
            model_name='quantitativequestion',
            name='left_anchor',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='quantitativequestion',
            name='max_score',
            field=models.SmallIntegerField(default=9, null=True),
        ),
        migrations.AddField(
            model_name='quantitativequestion',
            name='min_score',
            field=models.SmallIntegerField(default=0, null=True),
        ),
        migrations.AddField(
            model_name='quantitativequestion',
            name='predecessor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successors', to='pcari.QuantitativeQuestion'),
        ),
        migrations.AddField(
            model_name='quantitativequestion',
            name='right_anchor',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='comment',
            name='tag',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.AlterField(
            model_name='commentrating',
            name='score',
            field=models.SmallIntegerField(default=-2),
        ),
        migrations.AlterField(
            model_name='quantitativequestion',
            name='tag',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.DeleteModel(
            name='FlaggedComment',
        ),
        migrations.DeleteModel(
            name='Rating',
        ),
        migrations.DeleteModel(
            name='UserData',
        ),
        migrations.DeleteModel(
            name='UserProgression',
        ),
        migrations.AddField(
            model_name='optionquestionchoice',
            name='respondent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcari.Respondent'),
        ),
        migrations.RemoveField(
            model_name='commentrating',
            name='accounted',
        ),
        migrations.RemoveField(
            model_name='commentrating',
            name='cid',
        ),
        migrations.RemoveField(
            model_name='commentrating',
            name='user',
        ),
        migrations.AlterUniqueTogether(
            name='commentrating',
            unique_together=set([('respondent', 'comment')]),
        ),
        migrations.AlterUniqueTogether(
            name='quantitativequestionrating',
            unique_together=set([('respondent', 'question')]),
        ),
        migrations.AlterUniqueTogether(
            name='optionquestionchoice',
            unique_together=set([('respondent', 'question')]),
        ),
    ]
